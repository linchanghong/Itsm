package com.sccl.serviceManager.common.selectWindow.user.service;

import java.util.List;
import java.util.ArrayList;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.sccl.framework.DataManager;
import com.sccl.framework.common.tools.SystemStatic;
import com.sccl.framework.entity.MsPerson;
import com.sccl.framework.entity.Organization;
import com.sccl.serviceManager.common.selectWindow.person.dto.PsnInfoDTO;
import com.sccl.serviceManager.common.selectWindow.person.dto.SimplifyPsnInfoDTO;
import com.sccl.serviceManager.common.selectWindow.user.dto.UserInfoDTO;

@SuppressWarnings("all")
@Component("selectUserService")
public class SelectUserService implements ISelectUserService {

	private DataManager dataManager;

	public DataManager getDataManager() {
		return dataManager;
	}

	@Resource(name = "dataManager")
	public void setDataManager(DataManager dataManager) {
		this.dataManager = dataManager;
	}

	/**
	 * 根据部门Id查询用户
	 * 
	 * @param companyid
	 * @param depid
	 * @return
	 */
	public List<Object> findUsers(String depid, int first, int size,
			boolean isCount) {
	    
		List<Object> list = new ArrayList<Object>();
		String sql="";
		
		if(depid.equals(SystemStatic.COMPANY_ID)){
		    
			sql = "select u.USER_ID, u.USER_NAME, u.USER_CODE, u.PASSWORD, " +
					" b.ORG_ID, b.org_name, b.org_code, b.company_id," +
					"c.org_name as company_name " +
					"from ms_user u,  ms_person a, organization b," +
					"organization c " +
					"where c.org_id=b.company_id " +
					"and a.org_id=b.org_id " +
					"and u.PERSON_ID=a.PERSON_ID";
			
		}else{
		    
			String ids = findAllSonDepatment(depid);
			
			sql = "select u.USER_ID, u.USER_NAME, u.USER_CODE, u.PASSWORD, " +
                    " b.ORG_ID, b.org_name, b.org_code, b.company_id," +
                    "c.org_name as company_name " +
                    "from ms_user u,  ms_person a, organization b," +
                    "organization c " +
                    "where c.org_id=b.company_id " +
                    "and a.org_id=b.org_id " +
                    "and u.PERSON_ID=a.PERSON_ID " +
                    "and b.org_id in(" + ids + ")";
			
		}
		
		List<UserInfoDTO> listUser = (List<UserInfoDTO>) dataManager.nativeQuery(sql, UserInfoDTO.class, first, size);
		
		list.add(listUser);
		
		if (isCount) {
			int count = dataManager.getCountBySql(sql);
			list.add(1, count);
		}
		
		return list;
	}
	
	/**
	 * 根据部门Id查询用户,且不包含某一用户
	 */
	public List<Object> findUsersWithoutID(String depid, int userID, int first, int size,
            boolean isCount) {
        
        List<Object> list = new ArrayList<Object>();
        String sql="";
        String ifsqlString = " ";
        if(userID != -1)
            ifsqlString =  " and (u.USER_ID <= "+(userID-1)+" " +
                    "or u.USER_ID >= "+(userID+1)+") ";
       
        if(depid.equals(SystemStatic.COMPANY_ID)){
            
            sql = "select u.USER_ID, u.USER_NAME, u.USER_CODE, u.PASSWORD, " +
                    " b.ORG_ID, b.org_name, b.org_code, b.company_id," +
                    "c.org_name as company_name " +
                    "from ms_user u,  ms_person a, organization b," +
                    "organization c " +
                    "where 1=1 " + ifsqlString +
                    "and c.org_id=b.company_id " +
                    "and a.org_id=b.org_id " +
                    "and u.PERSON_ID=a.PERSON_ID";
            
        }else{
            
            String ids = findAllSonDepatment(depid);
            
            sql = "select u.USER_ID, u.USER_NAME, u.USER_CODE, u.PASSWORD, " +
                    " b.ORG_ID, b.org_name, b.org_code, b.company_id," +
                    "c.org_name as company_name " +
                    "from ms_user u,  ms_person a, organization b," +
                    "organization c " +
                    "where 1=1 " + ifsqlString +
                    "and c.org_id=b.company_id " +
                    "and a.org_id=b.org_id " +
                    "and u.PERSON_ID=a.PERSON_ID " +
                    "and b.org_id in(" + ids + ")";
            
        }
        
        List<UserInfoDTO> listUser = (List<UserInfoDTO>) dataManager.nativeQuery(sql, UserInfoDTO.class, first, size);
        
        list.add(listUser);
        
        if (isCount) {
            int count = dataManager.getCountBySql(sql);
            list.add(1, count);
        }
        
        return list;
    }

	/**
	 * 查找全部下属部门ID
	 * 
	 * @param depid
	 * @return
	 */
	private String findAllSonDepatment(String depid) {
	    
		String sql = "select * from organization t start with t.org_id='"
				+ depid + "' connect by t.parent_id = prior t.org_id";
		
		List<Organization> list = (List<Organization>) dataManager.nativeQuery(
				sql, Organization.class);

		StringBuilder ids = new StringBuilder();
		
		for (int i = 0; i < list.size(); i++) {
			Organization org = list.get(i);
			Integer id = org.getId();
			ids.append(id + ",");
		}

		String tempIds = ids.toString().toString();
		
		if (tempIds.endsWith(",")) {
			int index = tempIds.lastIndexOf(",");
			ids.deleteCharAt(index);
		}

		return ids.toString();
	}

	/**
	 * 根据用户输入模糊查询
	 * 
	 * @param where
	 * @return
	 */
	public List<Object> queryUsersByNameLike(int companyid, String userName, int first, int size,
			boolean isCount) {

		List<Object> list = new ArrayList<Object>();
		
		String sql = "select u.USER_ID, u.USER_NAME, u.USER_CODE, u.PASSWORD, " +
                " b.ORG_ID, b.org_name, b.org_code, b.company_id," +
                "c.org_name as company_name " +
                "from ms_user u,  ms_person a, organization b," +
                "organization c " +
                "where c.org_id=b.company_id " +
                "and a.org_id=b.org_id " +
                "and u.PERSON_ID=a.PERSON_ID";
		
		if (null != userName && !("").equals(userName.trim()))
			sql += " and u.USER_NAME like '%" + userName + "%'";
		
		List<UserInfoDTO> listUser = (List<UserInfoDTO>) dataManager.nativeQuery(sql, UserInfoDTO.class, first, (first+size));
		list.add(listUser);
		
		if (isCount) {
			int count = dataManager.getCountBySql(sql);
			list.add(count);
		}
		
		return list;
	}
	
}
